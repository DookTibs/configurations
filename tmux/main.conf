# to re-apply these changes, "tmux source ~/development/configurations/tmux/main.conf"
# to show bindings, prefix questionmark

# TEMP!!!
# unbind -n S-C-j
# unbind -n S-C-k
# unbind -n C-M-j
# unbind -n M-j
# unbind -n M-S-j
# unbind -n M-k
# unbind -n j
# unbind -n k

# set the title of terminal window to match the name of the session
set -g set-titles on
set -g set-titles-string "#S (tmux)"

# see http://crunchbang.org/forums/viewtopic.php?id=20504 for some more cool ideas
#
# USEFUL COMMANDS!!!
# to move a pane from one area to another...for instance the following command moves a pane in window 4. It puts it 
# in window 1, and splits pane 0 of window 1 to make room for it. Useful for isntance if I want to temporarily move 
# some output window into my main view (join-pane is another possibility)
#
#    move-pane -s 4 -t 1.0
#
# to undo that, and to take a pane and move it into it's own window...for instance move window 1's pane 1 into a new window
# unfortunately you can't name the window as part of this command.
#
#    break-pane -t 1.1
#    rename-window -t ? someDescriptiveName
#
#
# replace CTRL-A with CTRL-SPACE, like I am used to with GNU Screen
unbind C-a
set -g prefix C-Space


set -gw mode-keys vi

# replace standard split keys with more mnemonic dash/pipe
unbind-key '"'
unbind-key %
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"

# bind vi style movement between panes
bind-key k select-pane -U
bind-key j select-pane -D
bind-key h select-pane -L
bind-key l select-pane -R

# bind z to kill and restart a "listenForVimCommands" buffer 
# ideally if I want this behavior I should fire up a set of panes to ensure #1 actually is listening...
# unbind-key z

# have to send two CTRL-C's. So send 1, then sleep a tiny bit, then send a SECOND and then fire off the listenForVimCommands script!
# is it possible to also fire off the \ command to vim?
# bind-key z send-keys -t 1 C-c \; run-shell "sleep .1" \; send-keys -t 1 C-c "listenForVimCommands.sh Z" Enter
# bind-key z send-keys -t 0 \\

# smart pane switching with awareness of vim splits
# suggested by vim-tmux-navigator plugin
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# map capital C to clear screen AND history. Why doesn't the first method here work? Second works ok but puts extra line on the command history
unbind-key C
# bind-key C send-keys clear Enter \; clear-history
# bind-key C send-keys clear Enter \; send-keys "tmux clear-history" Enter
bind-key C send-keys clear Enter \; run "(tmux clear-history)"

# attempting to scroll chrome from within tmux
# THIS ONLY WORKS IN OSX TERMinAL IF YOU'VE CHECKED THE 'Use option as meta key' preference!
# bind -n M-j display-message 'test j!'
# bind -n M-k display-message 'test k!'
# bind -n M-j run-shell "~/development/appleScripts/chromeScroller.scpt pagedown"
# bind -n M-k run-shell "~/development/appleScripts/chromeScroller.scpt pageup"

# nice OSX copy/paste; see http://robots.thoughtbot.com/post/55885045171/tmux-copy-paste-on-os-x-a-better-future
# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection

# update 2016-12-15: moved the os-specific bits into osx.conf / cygwin.conf


# let's use PREFIX-s to toggle window synchronization for when I'm trying to quit out of a lot at once
# this removes the "choose-tree" default mapping
unbind-key s
bind-key s set-window-option synchronize-panes

# and z for zoom
unbind-key z
bind-key z resize-pane -Z

# bind < > ^ v to resize the current pane in that direction
bind-key < resize-pane -L 10
bind-key > resize-pane -R 10
bind-key ^ resize-pane -U 10
bind-key v resize-pane -D 10

# set active pane to red, easier for me to tell where I'm editing
set -g pane-active-border-fg red
# make it REALLY thick
# set -g pane-active-border-bg red

# active window will be dark grey (shell that is; Vim unaffected)
# can override wiht my bash function/alias tmux_color/tb
# check script "colorTest.sh" which prints out available colors. Use intl spelling
# set -g window-active-style 'bg=colour234'
set -g window-active-style 'fg=default,bg=black'
set -g window-style 'fg=default,bg=colour234'

# number windows from 1, makes for easier switching
set -g base-index 1

# let's map PREFIX-m ("monitor") to toggle option monitor-activity. Set this on a window and
# then you get a visual indicator when it finishes. Useful for kicking off long processes so you
# know when they finish. Test with something like "echo 'start' ; sleep 10 ; echo 'finish'"
# see http://superuser.com/questions/628602/tmux-set-color-of-changed-window
set -g visual-activity on
bind-key m setw monitor-activity



# status formatting
	# set -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
	# set -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
	# set -g status-left-bg brightgreen

	# allow lots of space for longer titles, and highlight the sessionName
	set -g status-left-length 100

	# vi keybindings on command editing
	set -g status-keys vi

	# set default colors for whole bar
	set -g status-fg brightwhite
	set -g status-bg blue

	# make window listing look nicer
	set -g status-justify centre
	# set -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
	# set -g window-status-current-format "#[bg=brightmagenta]#[fg=black] #I #[fg=black]#[bg=colour14] #W "
	set -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=black] #W "
	set -g window-status-current-format "#[bg=brightmagenta]#[fg=black] #I #[fg=black]#[bg=red] #W #F" # #F for active/zoom indicator

	# set right side to include sessionName as I often use status-left for other stuff
	set -g status-right-length 100
	# set -g status-right "[tmux #S]@#h #(date)"
	# set -g status-right "[tmux #S]@#h #(date) #(git branch 2>&1 | grep '*' | sed 's/* //')"
	set -g status-left "[#S]"
	set -g status-right "#(~/development/shellScripts/runPaneSpecificTmuxCommand.sh ~/development/shellScripts/showGitBranch.sh)"
	# this is causing errors on cygwin?
	# set -g status-right "#(date +'%Y-%m-%d %H:%M:%S')"
	# set -g status-right "#T[default]"

	# see http://stackoverflow.com/questions/12921852/tmux-conf-update-status-commands-on-panel-focus

# thanks https://filsinger.me/workflow/system-clipboard-with-tmux/
if-shell "uname | grep -qi Cygwin" "source-file ~/development/configurations/tmux/cygwin.conf"
if-shell "uname | grep -qi Darwin" "source-file ~/development/configurations/tmux/osx.conf"

# if-shell "tmux -V | awk '$2 > 2.3 { exit 0 } $2 <= 2.3 { exit 1 }'" "set-option -g update-environment TIBS_TMUX=old" "set-option -g update-environment TIBS_TMUX=new"
# maybe use run-shell and point to shell script to set some of this crap up - at least in bash we'll have real flow control
